#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Web:server');
var http = require('http');

var modulos = require('./Modulos.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//AGREGANDO COSAS

var mysql = require('mysql');
io = require('socket.io').listen(server);

var connection = mysql.createConnection({
   host: 'localhost',
   user: 'root',
   password: 'admin',
   database: 'pruebas',
   port: 3306
});

connection.connect(function(error){
   if(error){
      throw error;
   }else{
      //console.log('Conexion correcta.');
   }
});

io.on('connection', function(socket){

  socket.on('solicitar_llenar', function () {
    var query = connection.query('SELECT id_evento,nombre FROM EVENTO where estado=1', function(error, result){
      if(error){
       throw error;
     }else{
       var resultado = result;
       if(resultado.length > 0){
         var contador=0;
         var cadena_resultado=resultado[0].nombre+","+resultado[0].id_evento;
         contador++;
         while(resultado.length>contador){
           var aux=resultado[contador].nombre+","+resultado[contador].id_evento;
           cadena_resultado=cadena_resultado+";"+aux;
           contador++;	
         }
         socket.emit('Llenar',cadena_resultado);
       }else{
        socket.emit('Llenar','');
      }
    }
  }
  );
  });

  socket.on('insertar_evento', function (mensaje) {
    if(isNaN(mensaje.nombre)){
      var error_fecha=0;
      var f01=mensaje.fi.split("-");
      var mes1=parseInt(f01[1]);
      var dia1=parseInt(f01[2]);
      var año1=parseInt(f01[0]);
      if(mes1==2){
        if(dia1>29){
          error_fecha=1;
        }
        if(año1%4==0){
          if(año1%100==0){
            if(año1%400==0){
//año bisiesto
}
else{
//año no bisiesto
if(dia1>28){
  error_fecha=1;
}
}
}
else{
//año bisiesto
}
}
else{
//año no bisiesto
if(dia1>28){
  error_fecha=1;
}
}
}
if((mes1==4||mes1==6||mes1==9||mes1==11)&&dia1>30){
  error_fecha=1;
}
if(error_fecha==0){
  var query = connection.query('INSERT INTO EVENTO(nombre,estado,inicio,final) VALUES(?,?,?,?)', [mensaje.nombre,1,mensaje.fi,mensaje.ff], function(error, result){
   if(error){
     socket.emit('resultado','error');
     throw error;
   }else{
    socket.emit('resultado','correcto');
      //console.log(result);
    }
  }
  );
}
else{
  socket.emit('resultado','error01_fecha');
}}
else{
  socket.emit('resultado','error1');
}
}); 

socket.on('terminar_evento', function (evento_terminar) {
//console.log(id_evento);
var comprobacion=modulos.comprobar1(evento_terminar.nombre_usuario,evento_terminar.contrasena,'123');
if(comprobacion==1){
  var query = connection.query('UPDATE EVENTO SET estado=0 WHERE id_evento=? AND estado=1', [evento_terminar.id_evento_terminado], function(error, result){
   if(error){
     socket.emit('resultado2','error');
     throw error;
   }else{
    socket.emit('resultado2','correcto');
      //console.log(result);
    }
  }
  );
}
else {
  socket.emit('resultado2','error_contrasena');
}}); 

});
